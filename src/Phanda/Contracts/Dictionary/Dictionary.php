<?php

namespace Phanda\Contracts\Dictionary;

interface Dictionary extends \Iterator
{
    /**
     * Gets all the items in the dictionary
     *
     * @return array
     */
    public function all();

    /**
     * Converts the Dictionary to an array
     *
     * @return array
     */
    public function toArray();

    /**
     * Run a map over each of the items in the dictionary.
     *
     * @param callable $callback
     * @return Dictionary
     */
    public function map(callable $callback);

    /**
     * Pushes an item to the end of the array
     *
     * @param $value
     * @return Dictionary
     */
    public function push($value);

    /**
     * Checks if an offset exists.
     *
     * @param mixed $offset
     * @return bool
     */
    public function offsetExists($offset);

    /**
     * Gets an offset.
     *
     * @param mixed $offset
     * @return mixed
     */
    public function offsetGet($offset);

    /**
     * Sets an offset
     *
     * @param mixed $offset
     * @param mixed $value
     */
    public function offsetSet($offset, $value);

    /**
     * Unsets an offset.
     *
     * @param mixed $offset
     */
    public function offsetUnset($offset);

    /**
     * Counts the elements in the dictionary.
     *
     * @return int
     */
    public function count();

    /**
     * Returns the first result in this dictionary
     *
     * @return mixed The first value in the dictionary will be returned.
     */
    public function first();

    /**
     * Returns the closest nested iterator that can be safely traversed without
     * losing any possible transformations. This is used mainly to remove empty
     * IteratorIterator wrappers that can only slowdown the iteration process.
     *
     * @return \Traversable
     */
    public function unwrap();

    /**
     * Looks through each value in the dictionary, and returns another dictionary with
     * all the values that pass a truth test. Only the values for which the callback
     * returns true will be present in the resulting dictionary.
     *
     * @param callable|null $c
     * @return Dictionary
     */
    public function filter(?callable $c = null);

    /**
     * Creates a new dictionary where the items are the
     * concatenation of the lists of items generated by the transformer function
     * applied to each item in the original dictionary.
     *
     * @param callable|null $transformer
     * @return Dictionary
     */
    public function unfold(?callable $transformer = null);

    /**
     * Returns a new dictionary where the values extracted based on a value path
     * and then indexed by a key path. Optionally this method can produce parent
     * groups based on a group property path.
     *
     * @param callable|string $keyPath
     * @param callable|string $valuePath
     * @param callable|string|null $groupPath
     * @return Dictionary
     */
    public function combine($keyPath, $valuePath, $groupPath = null);

    /**
     * Returns a new dictionary where the values are nested in a tree-like structure
     * based on an id property path and a parent id property path.
     *
     * @param callable|string $idPath
     * @param callable|string $parentPath
     * @param string $nestingKey
     * @return Dictionary
     */
    public function nest($idPath, $parentPath, $nestingKey = 'children');
}